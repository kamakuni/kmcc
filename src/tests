// -*- c -*-

int printf();
int exit();
int strcmp(char *p, char *q);
int memcmp(char *p, char *q);

// This is a line comment.

/*
 * This is a block comment.
 */

int strcmp(char *p, char *q);

int assert(int expected, int actual, char *code) {
    if (expected == actual) {
        printf("%s => %d\n", code, actual);
    } else {
        printf("%s => %d expected but got %d\n", code, expected, actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int while_if1(){
    int i=0;
    while(i<10){
        if(i==0) return i; 
        return 11;
    }
}

int while_if2(){
    int i=0;
    while(i<10) {
        if(i<5) i=i+1;
        else return i;
    }
    return 11;
}

int for_if1(){
    int i=0;
    for(;i<=10;)
        if(i==0) return i;
    return 11;
}

int for_if2(){
    int i=0;
    for(;i<=10;)
        if(i<5) i=i+1;
        else return i;
    return 11;
}

int for_if3(){
    int i=0;
    for(;i<=10;)
        if(i<5) i=i+1;
        else return i;
    int ret;
    ret=11;
}

int three(){
    return 3;
}

int seven(){
    return 7;
}

int arg1(int a){
    return a;
}

int arg2(int a, int b){
    return a + b;
}

int assign(int a){
    return a = a + 1;
}

int fib(int n){
    if (n == 0) return 0;
    if (n == 1) return 1;
    return fib(n - 2) + fib(n - 1);
}

int foo(int *x, int y){
    return *x + y;
}

int sub_char(char a, char b, char c) {
    return a-b-c;
}

int block_comment(){
    /* return 1; */ return 2;
}

int comment(){
    // return 1;
    return 2;
}

short sub_short(short a, short b, short c) {
    return a-b-c;
} 

long sub_long(long a, long b, long c) {
    return a-b-c;
}

void ret_node() {
    return;
}

static int static_fn() {
    return 3;
} 

void voidfn(void) {}

int counter() {
    static int i;
    static int j = 1+1;
    return i++ + j++;
}

int g1[4];
int g2;
char g3 = 3;
short g4 = 4;
int g5 = 5;
long g6 = 6;
int *g7 = &g5;
char *g8 = "abc";
int g9[3] = {0, 1, 2};
char *g10[] = {"foo","bar"};
struct {char a; int b;} g11[2] = {{1, 2}, {3, 4}};
struct {int a[2];} g12[2] = {{{1, 2}}};
struct {int a[2];} g13[2] = {{1, 2}, 3, 4};
struct {int a[2];} g14[2] = {1, 2, 3, 4};
char *g15 = {"foo"};
char g16[][4] = {'f', 'o', 'o', 0, 'b', 'a', 'r', 0};
char g17[] = "foobar";
char g18[10] = "foobar";
char g19[3] = "foobar";
char *g20 = g17+0;
char *g21 = g17+3;
char *g22 = &g17-3;
char *g23[] = {g17+0, g17+3, g17-3};
int g24=3;
int *g25=&g24;
int g26[3] = {1, 2, 3};
int *g27 = g26 + 1;

typedef struct Tree {
    int val;
    struct Tree *lhs;
    struct Tree *rhs;
} Tree;

Tree *tree = &(Tree){
    1,
    &(Tree){
        2,
        &(Tree){ 3, 0, 0 },
        &(Tree){ 4, 0, 0 },
    },
    0,
};

extern int ext1;
extern int *ext2;
static int ext3 = 3;

int;
struct {char a; int b;};
typedef struct {char a; int b;} Ty1;

int main() {

    g1[0]=0;
    g1[1]=1;
    g1[2]=2;
    g1[3]=3;

    assert(0,({0&1;}),"{0&1;}");
    assert(1,({3&1;}),"{3&1;}");
    assert(3,({7&3;}),"{7&3;}");
    assert(10,({-1&10;}),"{-1&10;}");
    assert(1,({0|1;}),"{0|1;}");
    assert(0,({0^0;}),"{0^0;}");

    assert(47,({5+6*7;}),"{5+6*7;}");
    assert(15,({5* 3;}),"{5* 3;}");
    assert(7,({10 /2 + 2;}),"{10 /2 + 2;}");
    assert(15,({5*(9-6);}),"{5*(9-6);}");
    assert(4,({(3+5)/2;}),"{(3+5)/2;}");
    assert(5,({-10+15;}),"{-10+15;}");
    assert(3,({-(5+2)+10;}),"{-(5+2)+10;}");
    assert(10,({-10+20;}),"{-10+20;}");
    assert(10,({- -10;}),"{- -10;}");
    assert(10,({- - +10;}),"{- - +10;}");

    assert(0,({ 1 < 1;}),"{ 1 < 1;}");
    assert(0,({ 2 < 1;}),"{ 2 < 1;}");
    assert(1,({ 1 < 2;}),"{ 1 < 2;}");
    assert(0,({ 1 > 1;}),"{ 1 > 1;}");
    assert(1,({ 2 > 1;}),"{ 2 > 1;}");
    assert(0,({ 1 > 2;}),"{ 1 > 2;}");
    assert(1,({ 1 <= 1;}),"{ 1 <= 1;}");
    assert(0,({ 2 <= 1;}),"{ 2 <= 1;}");
    assert(1,({ 1 <= 2;}),"{ 1 <= 2;}");
    assert(1,({ 1 >= 1;}),"{ 1 >= 1;}");
    assert(1,({ 2 >= 1;}),"{ 2 >= 1;}");
    assert(0,({ 1 >= 2;}),"{ 1 >= 2;}");
    assert(1,({ 5 == 2 + 3;}),"{ 5 == 2 + 3;}");
    assert(0,({ 2 + 3 != 5;}),"{ 2 + 3 != 5;}");

    assert(30,({int a;a=30; a;}),"{int a;a=30; a;}");
    assert(24,({int a;a=9+15; a;}),"{int a;a=9+15; a;}");
    assert(3, ret3(),"ret3()");
    assert(3,({int a;int b;a=1;b=2; a+b;}),"{int a;int b;a=1;b=2; a+b;}");
    assert(4,({int a;int b;int c;a=b=2;c=a+b; c;}),"{int a;int b;int c;a=b=2;c=a+b; c;}");
    assert(7,({int a; a=4+3; a ;}),"{int a; a=4+3; a ;}");
    assert(6,({int foo; int bar;foo=1;bar=2+3; foo + bar;}),"{int foo; int bar;foo=1;bar=2+3; foo + bar;}");

    assert(2,({int x = 0; if(1<10) x = 2; x;}),"{int x = 0; if(1<10) x = 2; x;}");
    assert(10,({int var; var=1;if(1<10) var=10; var;}),"{int var; var=1;if(1<10) var=10; var;})");
    assert(1,({int var; var=1;if(1>10) var=10; var;}),"{int var; var=1;if(1>10) var=10; var;}");
    assert(2,({int x = 0; if(1<10) x = 2; else x = 3; x;}),"{int x = 0; if(1<10) x = 2; else x = 3; x;}");
    assert(3,({int x = 0; if(11<10) x = 2; else x = 3; x;}),"{int x = 0; if(11<10) x = 2; else x = 3; x;}");
    assert(2,({int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}");
    assert(3,({int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}");

    assert(2,({0?1:2;}),"{0?1:2;}");
    assert(1,({1?1:2;}),"{1?1:2;}");
    assert(3,({1,2,3;}),"{1,2,3;}");    
    
    assert(10,({int i=0;while(i<10)i=i+1; i;}),"{int i=0;while(i<10)i=i+1; i;}");
    assert(10,({int i=0;while(i<10){i=i+1;} i;}),"{int i=0;while(i<10){i=i+1;} i;}");
    assert(0,while_if1(),"while_if1()");
    assert(5,while_if2(),"while_if2()");

    assert(55,({int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; })," { int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }");
    assert(20,({int i;int a; a=10;for(i=0;i<10;i=i+1)a=a+1; a;}),"{int i;int a; a=10;for(i=0;i<10;i=i+1)a=a+1; return a;}");
    assert(11,({int i; i=0;for(;i<=10;)i=i+1; i;}),"{int i; i=0;for(;i<=10;)i=i+1;return i;}");
    assert(0,for_if1(),"for_if1()");
    assert(5,for_if2(),"for_if2()");
    assert(5,for_if3(),"for_if3()");

    assert(10,({three() + seven();}),"{return three() + seven();}");

    assert(5,({arg1(5);}),"{arg1(5);}");
    assert(10,({arg2(0, 10);}),"{arg2(0, 10);}");
    assert(10,({arg2(10, 0);}),"{arg2(10, 0);}");
    assert(10,({arg2(2*2,2+4);}),"{arg2(2*2,2+4);}");

    assert(1,assign(0),"assign(0)");

    assert(55,fib(10),"fib(10)");

    assert(3,({int x;int *y;y = &x;*y = 3;x;}),"{int x;int *y;y = &x;*y = 3;x;}");
    assert(3,({int x=3; *&x;}),"{int x=3; *&x;}");
    assert(3,({int x=3; int *y=&x; int **z=&y; **z;}),"{int x=3; int *y=&x; int **z=&y; **z;}");
    assert(5,({int x=3; int y=5; *(&x+1);}),"{int x=3; int y=5; *(&x+1);}");
    assert(5,({int x=3; int y=5; *(1+&x);}),"{int x=3; int y=5; *(1+&x);}");
    assert(3,({int x=3; int y=5; *(&y-1);}),"{int x=3; int y=5; *(&y-1);}");
    assert(2,({int x=3; (&x+2)-&x;}),"{int x=3; (&x+2)-&x;}");
    assert(5,({int x=3; int y=5; int *z=&x; *(z+1);}),"{int x=3; int y=5; int *z=&x; *(z+1);}");
    assert(3,({int x=3; int y=5; int *z=&y; *(z-1);}),"{int x=3; int y=5; int *z=&y; *(z-1);}");
    assert(5,({int x=3; int *y=&x; *y=5; x;}),"{int x=3; int *y=&x; *y=5; x;}");
    assert(7,({int x=3; int y=5; *(&x+1)=7; y;}),"{int x=3; int y=5; *(&x+1)=7; y;}");
    assert(7,({int x=3; int y=5; *(&y-1)=7; x;}),"{int x=3; int y=5; *(&y-1)=7; x;}");
    assert(8,({int x=3; int y=5; *&x + y;}),"{int x=3; int y=5; *&x + y;}");

    assert(4,({int x=3; sizeof(x);}),"{int x=3; sizeof(x);}");
    assert(4,({int x=3; sizeof x;}),"{int x=3; sizeof x;}");
    assert(8,({int x=3; sizeof(&x);}),"{int x=3; sizeof(&x);}");

    assert(3,({int x[2]; int *y=&x; *y=3; *x;}),"{int x[2]; int *y=&x; *y=3; *x;}");
    assert(3,({int a[2]; *a = 1; *(a + 1) = 2; int *p; p = a; *p + *(p + 1);}),"{int a[2]; *a = 1; *(a + 1) = 2; int *p; p = a; *p + *(p + 1);}");

    assert(3,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x;}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x;}");
    assert(4,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1);}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1);}");
    assert(5,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2);}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2);}");

    assert(3,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *x;}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *x;}");
    assert(4,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+1);}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+1);}");
    assert(5,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+2);}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+2);}");

    assert(7,({int x; char y; int a=&x; int b=&y; b-a;}),"{int x; char y; int a=&x; int b=&y; b-a;}");
    assert(1,({char x; int y; int a=&x; int b=&y; b-a;}),"{char x; int y; int a=&x; int b=&y; b-a;}");

    assert(0,({g1[0];}),"{g1[0];}");
    assert(1,({g1[1];}),"{g1[1];}");
    assert(2,({g1[2];}),"{g1[2];}");
    assert(3,({g1[3];}),"{g1[3];}");

    assert(4,({sizeof(g2);}),"{sizeof(g2);}");
    assert(16,({sizeof(g1);}),"{sizeof(g1);}");

    assert(1,({char x=1; x;}),"{char x=1; x;}");
    assert(1,({char x=1; char y=2; x;}),"{char x=1; char y=2; x;}");
    assert(2,({char x=1; char y=2; y;}),"{char x=1; char y=2; y;}");
    assert(1,sub_char(7, 3, 3),"sub_char(7, 3, 3)");

    assert(97,({"abc"[0];}),"{\"abc\"[0];}");
    assert(98,({"abc"[1];}),"{\"abc\"[1];}");
    assert(99,({"abc"[2];}),"{\"abc\"[2];}");
    assert(0,({"abc"[3];}),"{\"abc\"[3];}");
    assert(4,({sizeof("abc");}),"{sizeof(\"abc\");}");

    assert(97,({"abc"[0];}),"{\"abc\"[0];}");
    assert(98,({"abc"[1];}),"{\"abc\"[1];}");
    assert(99,({"abc"[2];}),"{\"abc\"[2];}");
    assert(0,({"abc"[3];}),"{\"abc\"[3];}");
    assert(4,({sizeof("abc");}),"{sizeof(\"abc\");}");

    assert(7,({"\a"[0];}),"{\"\a\"[0];}");
    assert(8,({"\b"[0];}),"{\"\b\"[0];}");
    assert(9,({"\t"[0];}),"{\"\t\"[0];}");
    assert(10,({"\n"[0];}),"{\"\n\"[0];}");
    assert(11,({"\v"[0];}),"{\"\v\"[0];}");
    assert(12,({"\f"[0];}),"{\"\f\"[0];}");
    assert(13,({"\r"[0];}),"{\"\r\"[0];}");
    assert(27,({"\e"[0];}),"{\"\e\"[0];}");
    assert(0,({"\0"[0];}),"{\"\0\"[0];}");
    
    assert(2,block_comment(),"block_comment()");
    assert(2,comment(),"comment()");

    assert(1,({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }");
    assert(2,({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }");
    assert(1,({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }");
    assert(2,({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }");
    assert(3,({ struct {int a; int b; int c;} x; x.a=1; x.b=2; x.c=3; x.c;}),"{ struct {int a; int b; int c;} x; x.a=1; x.b=2; x.c=3; x.c; }");

    assert(0,({ struct {int a; int b;} x[3]; int *p=x; p[0]=0; x[0].a; }),"{ struct {int a; int b;} x[3]; int *p=x; p[0]=0; x[0].a;}");
    assert(1,({ struct {int a; int b;} x[3]; int *p=x; p[1]=1; x[0].b; }),"{ struct {int a; int b;} x[3]; int *p=x; p[1]=1; x[0].b;}");
    assert(2,({ struct {int a; int b;} x[3]; int *p=x; p[2]=2; x[1].a; }),"{ struct {int a; int b;} x[3]; int *p=x; p[2]=2; x[1].a;}");
    assert(3,({ struct {int a; int b;} x[3]; int *p=x; p[3]=3; x[1].b; }),"{ struct {int a; int b;} x[3]; int *p=x; p[3]=3; x[1].b;}");

    assert(2,({int x[2][3]={{1,2,3},{4,5,6}}; x[0][1];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[0][1];}");
    assert(4,({int x[2][3]={{1,2,3},{4,5,6}}; x[1][0];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[1][0];}");
    assert(6,({int x[2][3]={{1,2,3},{4,5,6}}; x[1][2];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[1][2];}");
    assert(0,({int x[3]={}; x[0];}),"{int x[3]={}; x[0];}");
    assert(0,({int x[3]={}; x[1];}),"{int x[3]={}; x[1];}");
    assert(0,({int x[3]={}; x[2];}),"{int x[3]={}; x[2];}");
    assert(2,({int x[2][3]={{1,2}}; x[0][1]; }),"{int x[2][3]={{1,2}}; x[0][1]; }");
    assert(0,({int x[2][3]={{1,2}}; x[1][0]; }),"{int x[2][3]={{1,2}}; x[1][0]; }");
    assert(0,({int x[2][3]={{1,2}}; x[1][2]; }),"{int x[2][3]={{1,2}}; x[1][2]; }");

    assert(97,({char x[4]="abc"; x[0];}),"{char x[4]=\"abc\"; x[0];}");
    assert(99,({char x[4]="abc"; x[2];}),"{char x[4]=\"abc\"; x[2];}");
    assert(0,({char x[4]="abc"; x[3];}),"{char x[4]=\"abc\"; x[3];}");

    assert(97,({char x[2][4]={"abc","def"}; x[0][0]; })," {char x[2][4]={\"abc\",\"def\"}; x[0][0]; }");
    assert(0,({char x[2][4]={"abc","def"}; x[0][3]; })," {char x[2][4]={\"abc\",\"def\"}; x[0][3]; }");
    assert(100,({char x[2][4]={"abc","def"}; x[1][0]; })," {char x[2][4]={\"abc\",\"def\"}; x[1][0]; }");
    assert(102,({char x[2][4]={"abc","def"}; x[1][2]; })," {char x[2][4]={\"abc\",\"def\"}; x[1][2]; }");

    assert(4,({int x[]={1,2,3,4}; x[3];}),"{int x[]={1,2,3,4}; x[3];}");
    assert(16,({int x[]={1,2,3,4}; sizeof(x);}),"{int x[]={1,2,3,4}; sizeof(x);}");
    assert(4,({char x[]="foo"; sizeof(x);}),"{char x[]=\"foo\"; sizeof(x);}");

    assert(1,({ struct {int a; int b; int c;} x={1, 2, 3}; x.a;}),"{ struct {int a; int b; int c;} x={1, 2, 3}; x.a;}");
    assert(2,({ struct {int a; int b; int c;} x={1, 2, 3}; x.b;}),"{ struct {int a; int b; int c;} x={1, 2, 3}; x.b;}");
    assert(3,({ struct {int a; int b; int c;} x={1, 2, 3}; x.c;}),"{ struct {int a; int b; int c;} x={1, 2, 3}; x.c;}");
    assert(1,({ struct {int a; int b; int c;} x={1}; x.a;}),"{ struct {int a; int b; int c;} x={1}; x.a;}");
    assert(0,({ struct {int a; int b; int c;} x={1}; x.b;}),"{ struct {int a; int b; int c;} x={1}; x.b;}");
    assert(0,({ struct {int a; int b; int c;} x={1}; x.c;}),"{ struct {int a; int b; int c;} x={1}; x.c;}");
    assert(1,({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a;}),"{ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].a;}");
    assert(2,({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b;}),"{ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[0].b;}");
    assert(3,({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a;}),"{ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].a;}");
    assert(4,({ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b;}),"{ struct {int a; int b;} x[2]={{1,2},{3,4}}; x[1].b;}");
    assert(0,({ struct {int a; int b;} x[2]={{1,2}}; x[1].b;}),"{ struct {int a; int b;} x[2]={{1,2}}; x[1].b;}");
    assert(0,({ struct {int a; int b;} x={}; x.a;}),"{ struct {int a; int b;} x={}; x.a;}");
    assert(0,({ struct {int a; int b;} x={}; x.b;}),"{ struct {int a; int b;} x={}; x.b;}");
    assert(8,({ struct t {int a; int b;} x; struct t y; sizeof(y); }),"{ struct t {int a; int b;} x; struct t y; sizeof(y); }");
    assert(8,({ struct t {int a; int b;}; struct t y; sizeof(y); }),"{ struct t {int a; int b;}; struct t y; sizeof(y); }");
//    assert(2,({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }),"{ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }");
    assert(3,({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }),"{ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }");
    assert(3,({ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }),"{ struct t {char a;} x; struct t *y = &x; x.a=3; y->a; }");
    assert(3,({ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }),"{ struct t {char a;} x; struct t *y = &x; y->a=3; x.a; }");

    assert(3,({g3;}),"{g3;}");
    assert(4,({g4;}),"{g4;}");
    assert(5,({g5;}),"{g5;}");
    assert(6,({g6;}),"{g6;}");
    assert(5,({*g7;}),"{*g7;}");
    assert(0,({strcmp(g8,"abc");}),"{strcmp(g8,\"abc\");}");

    assert(2,({short x; sizeof(x);}),"{short x; sizeof(x);}");
    assert(8,({long x; sizeof(x);}),"{long x; sizeof(x);}");

    assert(1,({sub_short(7,3,3);}),"{sub_short(7,3,3);}");
    assert(1,({sub_long(7,3,3);}),"{sub_long(7,3,3);}");

    assert(0,({ _Bool x=0; x; }),"{ _Bool x=0; x; }");
    assert(1,({ _Bool x=1; x; }),"{ _Bool x=1; x; }");
    assert(1,({ _Bool x=2; x; }),"{ _Bool x=2; x; }");

    assert(8,({ long long x; sizeof(x); }),"{ long long x; sizeof(x); }");
    assert(1,({ sizeof(char);}),"{ sizeof(char);}");
    assert(2,({ sizeof(short);}),"{ sizeof(short);}");
    assert(4,({ sizeof(int);}),"{ sizeof(int);}");
    assert(8,({ sizeof(long);}),"{ sizeof(long);}");
    assert(8,({ sizeof(char *);}),"{ sizeof(char *);}");
    assert(8,({ sizeof(int *);}),"{ sizeof(int *);}");
    assert(8,({ sizeof(long *);}),"{ sizeof(long *);}");
    assert(8,({ sizeof(int **);}),"{ sizeof(int **);}");
    assert(8,({ sizeof(int(*)[4]);}),"{ sizeof(int(*)[4]);}");
    assert(32,({ sizeof(int*[4]);}),"{ sizeof(int*[4]);}");
    assert(16,({ sizeof(int[4]);}),"{ sizeof(int[4]);}");
    assert(48,({ sizeof(int[3][4]);}),"{ sizeof(int[3][4]);}");
    assert(8,( { sizeof(struct {int a;int b;});}),"{ sizeof(struct {int a;int b;});}");
    assert(24,({ int *x[3]; sizeof(x); }),"{ int *x[3]; sizeof(x); }");
    assert(8,({ int (*x)[3]; sizeof(x); }),"{ int (*x)[3]; sizeof(x); }");
    assert(3,({ int *x[3]; int y; x[0]=&y; y=3; x[0][0]; }),"{ int *x[3]; int y; x[0]=&y; y=3; x[0][0]; }");
    assert(4,({ int x[3]; int (*y)[3]=x; y[0][0]=4; y[0][0]; }),"{ int x[3]; int (*y)[3]=x; y[0][0]=4; y[0][0]; }");

    assert(131585,({(int)8590066177;}),"{(int)8590066177;}");
    assert(513,({(short)8590066177;}),"{(short)8590066177;}");
    assert(1,({(char)8590066177;}),"{(char)8590066177;}");

    assert(1,({(_Bool)1; }),"{(_Bool)1;}");
    assert(1,({(_Bool)2; }),"{(_Bool)2;}");
    assert(0,({(_Bool)(char)256; }),"{(_Bool)(char)256;}");

    assert(1,({(long)1; }),"{(long)1;}");
    assert(0,({(long)&*(int *)0; }),"{(long)&*(int *)0;}");
    assert(5,({int x=5; long y=(long)&x; *(int*)y;}),"{ int x=5; long y=(long)&x; *(int*)y; }");

    assert(97, 'a', "'a'");
    assert(10, '\n', "\'\\n\'");

    assert(0,({enum { zero, one, two}; zero; }),"{ enum { zero, one, two}; zero; }");
    assert(1,({enum { zero, one, two}; one; }),"{ enum { zero, one, two}; one; }");
    assert(2,({enum { zero, one, two}; two; }),"{ enum { zero, one, two}; two; }");
    assert(5,({enum { five=5, six, seven}; five;}),"{ enum { five=5, six, seven}; five;}");
    assert(6,({enum { five=5, six, seven}; six;}),"{ enum { five=5, six, seven}; six;}");
    assert(0,({enum { zero, five=5, three=3, four}; zero;}),"{ enum { zero, five=5, three=3, four}; zero;}");
    assert(5,({enum { zero, five=5, three=3, four}; five;}),"{ enum { zero, five=5, three=3, four}; five;}");
    assert(3,({enum { zero, five=5, three=3, four}; three;}),"{ enum { zero, five=5, three=3, four}; three;}");
    assert(4,({enum { zero, five=5, three=3, four}; four;}),"{ enum { zero, five=5, three=3, four}; four;}");
    assert(4,({enum { zero, one, two} x; sizeof(x); }),"{ enum { zero, one, two} x; sizeof(x); }");
    assert(4,({enum t { zero, one, two}; enum t y; sizeof(y); }),"{ enum t { zero, one, two}; enum t y; sizeof(y); }");

    assert(3,static_fn(),"static_fn()");

    assert(55,({int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j;}),"{int j=0; for (int i=0; i<=10; i=i+1) j=j+i; j;}");
    assert(3,({int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i;}),"{int i=3; int j=0; for (int i=0; i<=10; i=i+1) j=j+i; i;}");
    assert(1,({1<<0;}),"{1<<0;}");
    assert(8,({1<<3;}),"{1<<3;}");
    assert(10,({5<<1;}),"{5<<1;}");
    assert(2,({5>>1;}),"{5>>1;}");
    assert(-1,({-1>>1;}),"{-1>>1;}");
    assert(1,({int i=1; i<<=0; i;}),"{int i=1; i<<=0; i;}");
    assert(8,({int i=1; i<<=3; i;}),"{int i=1; i<<=3; i;}");
    assert(10,({int i=5; i<<=1; i;}),"{int i=5; i<<=1; i;}");
    assert(2,({int i=5; i>>=1; i;}),"{int i=5; i>>=1; i;}");
    assert(-1,({-1;}),"{-1;}");
    assert(-1,({int i=-1; i;}),"{int i=-1; i;}");
    assert(-1,({int i=-1; i>>=1; i;}),"{int i=-1; i>>=1; i;}");
    assert(3,({(1,2,3);}),"{(1,2,3);}");

    assert(3,({int i=2; ++i;}),"{int i=2; ++i;}");
    assert(1,({int i=2; --i;}),"{int i=2; --i;}");
    assert(2,({int i=2; i++;}),"{int i=2; i++;}");
    assert(2,({int i=2; i--;}),"{int i=2; i--;}");
    assert(3,({int i=2; i++; i;}),"{int i=2; i++; i;}");
    assert(1,({int i=2; i--; i;}),"{int i=2; i--; i;}");
    assert(1,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p++; }");
    assert(2,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; ++*p; }");
    assert(1,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; *p--; }");
    assert(0,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; --*p; }");
    assert(0,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[0]; }");
    assert(0,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[1]; }");
    assert(2,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; a[2]; }");
    assert(2,({int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }),"{int a[3]; a[0]=0; a[1]=1; a[2]=2; int *p=a+1; (*p++)--; *p; }");
    assert(7,({int i=2; i+=5; i;}),"{ int i=2; i+=5; i;}");
    assert(7,({int i=2; i+=5;}),"{ int i=2; i+=5;}");
    assert(3,({int i=5; i-=2; i;}),"{ int i=5; i-=2; i;}");
    assert(3,({int i=5; i-=2;}),"{ int i=5; i-=2;}");
    assert(6,({int i=3; i*=2; i;}),"{ int i=3; i*=2; i;}");
    assert(6,({int i=3; i*=2;}),"{ int i=3; i*=2;}");
    assert(3,({int i=6; i/=2; i;}),"{ int i=6; i/=2; i;}");
    assert(3,({int i=6; i/=2;}),"{ int i=6; i/=2;}");

    assert(511,({0777;}),"{0777;}");
    assert(0,({0x0;}),"{0x0;}");
    assert(10,({0xa;}),"{0xa;}");
    assert(10,({0xA;}),"{0xA;}");
    assert(48879,({0xbeef;}),"{0xbeef;}");
    assert(48879,({0xBEEF;}),"{0xBEEF;}");
    assert(48879,({0XBEEF;}),"{0XBEEF;}");
    assert(0,({0b0;}),"{0b0;}");
    assert(1,({0b1;}),"{0b1;}");
    assert(47,({0b101111;}),"{0b101111;}");
    assert(47,({0B101111;}),"{0B101111;}");

    assert(8, ({ struct *foo; sizeof(foo); }), "struct *foo; sizeof(foo);");
    assert(4, ({ struct T *foo; struct T {int x;}; sizeof(struct T); }), "struct T *foo; struct T {int x;}; sizeof(struct T);");
    assert(1, ({ struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x; }), "struct T { struct T *next; int x; } a; struct T b; b.x=1; a.next=&b; a.next->x;");

    assert(0, g9[0], "g9[0]");
    assert(0, strcmp(g10[0], "foo"), "strcmp(g10[0], \"foo\")");
    assert(1, g11[0].a, "g11[0].a");
    assert(1, g12[0].a[0], "g12[0].a[0]");

    assert(1, g13[0].a[0], "g13[0].a[0]");
    assert(2, g13[0].a[1], "g13[0].a[1]");
    assert(3, g13[1].a[0], "g13[1].a[0]");
    assert(4, g13[1].a[1], "g13[1].a[1]");

    assert(1, g14[0].a[0], "g14[0].a[0]");
    assert(2, g14[0].a[1], "g14[0].a[1]");
    assert(3, g14[1].a[0], "g14[1].a[0]");
    assert(4, g14[1].a[1], "g14[1].a[1]");

    assert(0, ({ int x[2][3]={0,1,2,3,4,5,}; x[0][0]; }), "int x[2][3]={0,1,2,3,4,5,}; x[0][0];");
    assert(3, ({ int x[2][3]={0,1,2,3,4,5,}; x[1][0]; }), "int x[2][3]={0,1,2,3,4,5,}; x[1][0];");

    assert(0, ({ struct {int a; int b;} x[2]={0,1,2,3}; x[0].a; }), "struct {int a; int b;} x[2]={0,1,2,3}; x[0].a;");
    assert(2, ({ struct {int a; int b;} x[2]={0,1,2,3}; x[1].a; }), "struct {int a; int b;} x[2]={0,1,2,3}; x[1].a;");

    assert(0, strcmp(g15, "foo"), "strcmp(g15, \"foo\")");
    assert(0, strcmp(g16[0], "foo"), "strcmp(g16[0], \"foo\")");
    assert(0, strcmp(g16[1], "bar"), "strcmp(g16[1], \"bar\")");

    assert(7, sizeof(g17), "sizeof(g17)");
    assert(10, sizeof(g18), "sizeof(g18)");
    assert(3, sizeof(g19), "sizeof(g19)");

    assert(0, memcmp(g17, "foobar", 7), "memcmp(g17, \"foobar\", 7)");
//    assert(0, memcmp(g18, "foobar\0\0\0", 10), "memcmp(g18, \"foobar\\0\\0\\0\", 10)");
//    assert(0, memcmp(g19, "foo", 3), "memcmp(g19, \"foo\", 3)");

    assert(0, strcmp(g20, "foobar"), "strcmp(g20, \"foobar\")");
    assert(0, strcmp(g21, "bar"), "strcmp(g21, \"bar\")");
    assert(0, strcmp(g22+3, "foobar"), "strcmp(g22+3, \"foobar\")");

    assert(0, strcmp(g23[0], "foobar"), "strcmp(g23[0], \"foobar\")");
    assert(0, strcmp(g23[1], "bar"), "strcmp(g23[1], \"bar\")");
    assert(0, strcmp(g23[2]+3, "foobar"), "strcmp(g23[2]+3, \"foobar\")");

    assert(3, g24, "g24");
    assert(3, *g25, "*g25");
    assert(2, *g27, "*g27");

    ext1 = 5;
    assert(5, ext1, "ext1");

    ext2 = &ext1;
    assert(5, *ext2, "*ext2");

    ;

    assert(1, _Alignof(char), "_Alignof(char)");
    assert(2, _Alignof(short), "_Alignof(short)");
    assert(4, _Alignof(int), "_Alignof(int)");
    assert(8, _Alignof(long), "_Alignof(long)");
    assert(8, _Alignof(long long), "_Alignof(long long)");
    assert(1, _Alignof(char[3]), "_Alignof(char[3])");
    assert(4, _Alignof(int[3]), "_Alignof(int[3])");
    assert(1, _Alignof(struct {char a; char b;}[2]), "_Alignof(struct {char a; char b;}[2])");
    assert(8, _Alignof(struct {char a; long b;}[2]), "_Alignof(struct {char a; long b;}[2])");
    
    assert(2, counter(), "counter()");
    assert(4, counter(), "counter()");
    assert(6, counter(), "counter()");

    assert(1, (int){1}, "(int){1}");
    assert(2, ((int[]){0,1,2})[2], "((int[]){0,1,2})[2]");
    assert('a', ((struct {char a; char b;}){'a', 3}).a, "((struct {char a; char b;}){'a', 3}).a");
    assert(3, ({ int x=3; (int){x}; }), "int x=3; (int){x};");
    
    assert(1, tree->val, "tree->val");
    assert(2, tree->lhs->val, "tree->lhs->val");
    assert(3, tree->lhs->lhs->val, "tree->lhs->lhs->val");
    assert(4, tree->lhs->rhs->val, "tree->lhs->rhs->val");

    ret_node();

    assert(3, ext3, "ext3");

    assert(0, !1, "!1");
    assert(0, !2, "!2");
    assert(1, !0, "!0");

    assert(0, 0&&1, "0&&1");
    assert(0, (2-2)&&5, "(2-2)&&5");
    assert(1, 1&&5, "1&&5");

    assert(1, 0||1, "0||1");
    assert(1, 0||(2-2)||5, "0||(2-2)||5");
    assert(0, 0||0, "0||0");
    assert(0, 0||(2-2), "0||(2-2)");

    assert(-1, ~0, "~0");
    assert(0, ~-1, "~-1");

    assert(3, ({ int i=0; for(;i<10;i++) { if (i == 3) break; } i; }), "int i=0; for(;i<10;i++) { if (i == 3) break; } i;");
    assert(4, ({ int i=0; while (1) { if (i++ == 3) break; } i; }), "int i=0; while (1) { if (i++ == 3) break; } i; ");
    assert(3, ({ int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break;} i; }), "int i=0; for(;i<10;i++) { for (;;) break; if (i == 3) break;} i; ");
    assert(4, ({ int i=0; while (1) { while (1) break; if (i++ ==3) break; } i; }), "int i=0; while (1) { while (1) break; if (i++ ==3) break; } i;");

    assert(10, ({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i; }),"int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } i;");
    assert(6, ({ int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j; }), "int i=0; int j=0; for (;i<10;i++) { if (i>5) continue; j++; } j;");
    assert(10, ({ int i=0; int j=0; for (;!i;) { for (;j!=10;j++) continue; break; } j; }),"int i=0; int j=0; for (;!i;) { for (;j!=10;j++) continue; break; } j;");
    assert(11, ({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i; }),"int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i;");
    assert(5, ({ int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } j; }),"int i=0; int j=0; while (i++<10) { if (i>5) continue; j++; } i;");
    assert(11, ({ int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j; }),"int i=0; int j=0; while(!i) { while (j++!=10) continue; break; } j;");

    assert(3, ({ int i=0; goto a; a: i++; b: i++; c: i++; i; }), "int i=0; goto a; a: i++; b: i++; c: i++; i;");
    assert(2, ({ int i=0; goto e; d: i++; e: i++; f: i++; i; }), "int i=0; goto e; d: i++; e: i++; f: i++; i;");
    assert(1, ({ int i=0; goto i; g: i++; h: i++; i: i++; i; }), "int i=0; goto i; g: i++; h: i++; i: i++; i;");

    assert(5, ({ int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }), "int i=0; switch(0) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i;");
    assert(6, ({ int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }), "int i=0; switch(1) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i;");
    assert(7, ({ int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }), "int i=0; switch(2) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i;");
    assert(0, ({ int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i; }), "int i=0; switch(3) { case 0:i=5;break; case 1:i=6;break; case 2:i=7;break; } i;");
    assert(5, ({ int i=0; switch(0) { case 0:i=5;break; default:i=7; } i; }), "int i=0; switch(0) { case 0:i=5;break; default:i=7; } i;");
    assert(7, ({ int i=0; switch(1) { case 0:i=5;break; default:i=7; } i; }), "int i=0; switch(1) { case 0:i=5;break; default:i=7; } i;");
    assert(2, ({ int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }), "int i=0; switch(1) { case 0: 0; case 1: 0; case 2: 0; i=2; } i;");
    assert(0, ({ int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i; }), "int i=0; switch(3) { case 0: 0; case 1: 0; case 2: 0; i=2; } i;");

    assert(2, ({ int i=6; i&=3; i; }), "int i=6; i&=3; i;");
    assert(7, ({ int i=6; i|=3; i; }), "int i=6; i|=3; i;");
    assert(10, ({ int i=15; i^=5; i; }), "int 15; i^=5; i;");

    assert(7, ({ int i=0; int j=0; do { j++; } while (i++ < 6); j; }), "int i=0; int j=0; do { j++; } while (i++ < 6); j;");
    assert(4, ({ int i=0; int j=0; int k=0; do { if (++j > 3) break; continue; k++; } while (1); j; }), "int i=0; int j=0; int k=0; do { if (j++ > 3) break; continue; k++; } while (1); j;");

    printf("OK\n"); 
    return 0;
}
